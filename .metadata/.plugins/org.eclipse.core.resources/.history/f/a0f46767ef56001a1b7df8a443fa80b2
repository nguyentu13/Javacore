package truong.nguyen.spring_boot_api.controller.api_controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import truong.nguyen.spring_boot_api.common.GsonUtils;
import truong.nguyen.spring_boot_api.controller.BaseController;
import truong.nguyen.spring_boot_api.listener.request.api_request.UserLoginRequest;
import truong.nguyen.spring_boot_api.listener.response.BasePagingDataResponse;
import truong.nguyen.spring_boot_api.listener.response.api_response.UserLoginResponse;
import truong.nguyen.spring_boot_api.model.PageInfo;
import truong.nguyen.spring_boot_api.model.User;
import truong.nguyen.spring_boot_api.repository.UserGetListByRoleRepository;
import truong.nguyen.spring_boot_api.repository.UserLoginRepository;
import truong.nguyen.spring_boot_api.repository.UserRepository;
import truong.nguyen.spring_boot_api.security.JwtSercurity;
import truong.nguyen.spring_boot_api.security.PayLoadInfo;
import truong.nguyen.spring_boot_api.status.StatusCode;
import truong.nguyen.spring_boot_api.status.StatusMessage;

@RestController
@RequestMapping("/truong_nguyen/api/v1/user")
public class UserController extends BaseController {
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private UserLoginRepository userLoginRepository;

    @Autowired
    private UserGetListByRoleRepository userGetListByRoleRepository;

    @GetMapping("/list")
    public ResponseEntity getList(@RequestParam(value = "trans_id") String trans_id,
                                  @RequestHeader("token") String token,
                                  @RequestParam(value = "page_index",required = false,defaultValue = "0") int page_index,
                                  @RequestParam(value = "page_size",required = false,defaultValue = "5") int page_size,
                                  @RequestParam(value = "order_by",required = false,defaultValue = "id") String order_by,
                                  @RequestParam(value = "order_type",required = false,defaultValue = "ASC") String order_type)
    {
        logPaging(trans_id,page_index,page_size,order_by,order_type);
        Page<User> page = null;
        BasePagingDataResponse pageInfo = null;
        try{
            if(!validateToken(token,trans_id)) {
                return getResponse(HttpStatus.BAD_REQUEST, StatusCode.TOKEN_INVALID, StatusMessage.TOKEN_INVALID,null);
            }

            if(!isAdmin(token))
                return getResponse(HttpStatus.FORBIDDEN,StatusCode.FORBIDDEN,StatusMessage.FORBIDDEN,null);

            page = userRepository.findAll(PageRequest.of(page_index,page_size,
                    (order_type .equals("ASC")) ? Sort.by(order_by).ascending() : Sort.by(order_by).descending()));

            pageInfo = new BasePagingDataResponse(page_index,page_size,page.getNumberOfElements(),
                    page.getTotalPages(),page.getContent());
        }
        catch(Exception ex){
            logger.debug(ex);
            return getResponse(HttpStatus.BAD_REQUEST,StatusCode.ERROR_CODE,StatusMessage.ERROR_MESSAGE,null);
        }

        logResult(trans_id,pageInfo);
        return getResponse(HttpStatus.OK,StatusCode.SUCCESS_CODE,StatusMessage.SUCCESS_MESSAGE,pageInfo);
    }

    @GetMapping("/list_by_name")
    public ResponseEntity getListByName(@RequestParam(value = "trans_id") String trans_id,
                                        @RequestHeader("token") String token,
                                        @RequestParam(value = "page_index",required = false,defaultValue = "0") int page_index,
                                        @RequestParam(value = "page_size",required = false,defaultValue = "5") int page_size,
                                        @RequestParam(value = "order_by",required = false,defaultValue = "id") String order_by,
                                        @RequestParam(value = "order_type",required = false,defaultValue = "ASC") String order_type,
                                        @RequestParam("name") String name)
    {
        logPagingByAttribute(trans_id,page_index,page_size,order_by,order_type,name);
        Page<User> page = null;
        BasePagingDataResponse pageInfo = null;
        try{
            if(!validateToken(token,trans_id)) {
                return getResponse(HttpStatus.BAD_REQUEST,StatusCode.TOKEN_INVALID,StatusMessage.TOKEN_INVALID,null);
            }

            if(!isAdmin(token)) return getResponse(HttpStatus.FORBIDDEN,StatusCode.FORBIDDEN,StatusMessage.FORBIDDEN,null);

            page = userRepository.findAllByNameLike(name,PageRequest.of(page_index,page_size,
                    (order_type.equals("ASC"))? Sort.by(order_by).ascending():Sort.by(order_by).descending()));

            pageInfo = new BasePagingDataResponse(page_index,page_size,page.getNumberOfElements(),
                    page.getTotalPages(),page.getContent());
        }
        catch (Exception ex){
            logger.debug(ex);
            return getResponse(HttpStatus.BAD_REQUEST,StatusCode.ERROR_CODE,StatusMessage.ERROR_MESSAGE,null);
        }

        logResult(trans_id,pageInfo);
        return getResponse(HttpStatus.OK,StatusCode.SUCCESS_CODE,StatusMessage.SUCCESS_MESSAGE,pageInfo);
    }

    @GetMapping("list_by_role")
    public ResponseEntity getAllByRole(@RequestParam("trans_id") String trans_id,
                                       @RequestHeader("token") String token,
                                       @RequestParam(value = "page_index",required = false,defaultValue = "0") int page_index,
                                       @RequestParam(value = "page_size",required = false,defaultValue = "5") int page_size,
                                       @RequestParam(value = "order_by",required = false,defaultValue = "id") String order_by,
                                       @RequestParam(value = "order_type",required = false,defaultValue = "ASC") String order_type,
                                       @RequestParam("role_id") int role_id){
        logPagingByAttribute(trans_id,page_index,page_size,order_by,order_type,role_id);
        BasePagingDataResponse response = null;

        try{
            if(!validateToken(token,trans_id)) {
                return getResponse(HttpStatus.BAD_REQUEST,StatusCode.TOKEN_INVALID,StatusMessage.TOKEN_INVALID,null);
            }

            if(!isAdmin(token)) return getResponse(HttpStatus.FORBIDDEN,StatusCode.FORBIDDEN,StatusMessage.FORBIDDEN,null);

            PageInfo pageInfo = new PageInfo();
            pageInfo.setPage_index(page_index);
            pageInfo.setPage_size(page_size);
            pageInfo.setOrder_by(order_by);
            pageInfo.setOrder_type(order_type == "ASC"?true:false);

            response = userGetListByRoleRepository.getListByRole(role_id,pageInfo);
        }
        catch (Exception ex){
            logger.debug(ex);
            return getResponse(HttpStatus.BAD_REQUEST,StatusCode.ERROR_CODE,StatusMessage.ERROR_MESSAGE,null);
        }

        logResult(trans_id,response);
        return getResponse(HttpStatus.OK,StatusCode.SUCCESS_CODE,StatusMessage.SUCCESS_MESSAGE,response);
    }

    @GetMapping("/detail")
    public ResponseEntity getById(@RequestParam("trans_id") String trans_id,
                                  @RequestHeader("token") String token,
                                  @RequestParam("id") int id)
    {
        logBasic(trans_id,id);
        User user = null;
        try{
            if(!validateToken(token,trans_id))
                return getResponse(HttpStatus.BAD_REQUEST,StatusCode.TOKEN_INVALID,StatusMessage.TOKEN_INVALID,null);

            user =  userRepository.findById(id);
        }
        catch(Exception ex){
            logger.debug(ex);
            return getResponse(HttpStatus.BAD_REQUEST,StatusCode.ERROR_CODE,StatusMessage.ERROR_MESSAGE,null);
        }

        logResult(trans_id,user);
        return getResponse(HttpStatus.OK,StatusCode.SUCCESS_CODE,StatusMessage.SUCCESS_MESSAGE,user);
    }

    @PostMapping("/insert")
    public ResponseEntity insert(@RequestParam("trans_id") String trans_id,
                                 @RequestBody User user)
    {
        logBasic(trans_id,user);
        try{
            userRepository.save(user);
        }
        catch (Exception ex){
            logger.debug(ex);
            return getResponse(HttpStatus.BAD_REQUEST,StatusCode.ERROR_CODE,StatusMessage.ERROR_MESSAGE,null);
        }

        logResult(trans_id,user);
        return getResponse(HttpStatus.CREATED,StatusCode.SUCCESS_CODE,StatusMessage.SUCCESS_MESSAGE,null);
    }

    @PutMapping("/update")
    public ResponseEntity update(@RequestParam("trans_id") String trans_id,
                                 @RequestHeader("token") String token,
                                 @RequestBody User user)
    {
        logBasic(trans_id,user);
        try{
            if(!validateToken(token,trans_id))
                return getResponse(HttpStatus.BAD_REQUEST,StatusCode.TOKEN_INVALID,StatusMessage.TOKEN_INVALID,null);

            userRepository.save(user);
        }
        catch (Exception ex){
            logger.debug(ex);
            return getResponse(HttpStatus.BAD_REQUEST,StatusCode.ERROR_CODE,StatusMessage.ERROR_MESSAGE,null);
        }

        logResult(trans_id,user);
        return getResponse(HttpStatus.OK,StatusCode.SUCCESS_CODE,StatusMessage.SUCCESS_MESSAGE,null);
    }

    @DeleteMapping("/delete")
    public ResponseEntity delete(@RequestParam("trans_id") String trans_id,
                                 @RequestHeader("token") String token,
                                 @RequestParam("id") int id)
    {
        logBasic(trans_id,id);
        try{
            if(!validateToken(token,trans_id))
                return getResponse(HttpStatus.BAD_REQUEST,StatusCode.TOKEN_INVALID,StatusMessage.TOKEN_INVALID,null);

            userRepository.deleteById(id);
        }
        catch (Exception ex){
            logger.debug(ex);
            return getResponse(HttpStatus.BAD_REQUEST,StatusCode.ERROR_CODE,StatusMessage.ERROR_MESSAGE,null);
        }

        logResult(trans_id,id);
        return getResponse(HttpStatus.OK,StatusCode.SUCCESS_CODE,StatusMessage.SUCCESS_MESSAGE,null);
    }

    @PostMapping("/login")
    public ResponseEntity login(@RequestParam("trans_id") String trans_id,
                                @RequestBody String body)
    {
//        logBasic(trans_id,body);
//        UserLoginResponse response = null;
//        try{
//            UserLoginRequest request = GsonUtils.parseFromJson(body,UserLoginRequest.class);
//
//            response = userLoginRepository.login(request.getUser_name(),request.getPassword());
//
//            if(response == null){
//                return getResponse(HttpStatus.UNAUTHORIZED,StatusCode.UNAUTHORIZED,StatusMessage.UNAUTHORIZED,null);
//            }
//
//            PayLoadInfo payload = setPayload(request,response.getRole());
//
//            response.setToken(JwtSercurity.getToken(GsonUtils.parseToJson(payload)));
//        }
//        catch (Exception ex){
//            logger.debug(ex);
//            return getResponse(HttpStatus.BAD_REQUEST,StatusCode.ERROR_CODE,StatusMessage.ERROR_MESSAGE,null);
//        }
//
//        logResult(trans_id,response);
//        return getResponse(HttpStatus.OK,StatusCode.SUCCESS_CODE,StatusMessage.SUCCESS_MESSAGE,response);
    	return getResponse(HttpStatus.OK,StatusCode.SUCCESS_CODE,StatusMessage.SUCCESS_MESSAGE,"hello world");
    }

}
