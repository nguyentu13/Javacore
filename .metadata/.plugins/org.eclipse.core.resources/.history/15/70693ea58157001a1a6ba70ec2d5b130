package truong.nguyen.spring_boot_api.controller.api_controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import truong.nguyen.spring_boot_api.controller.BaseController;
import truong.nguyen.spring_boot_api.listener.response.BasePagingDataResponse;
import truong.nguyen.spring_boot_api.model.PageInfo;
import truong.nguyen.spring_boot_api.repository.ProductRepository;
import truong.nguyen.spring_boot_api.status.StatusCode;
import truong.nguyen.spring_boot_api.status.StatusMessage;

@RestController
@RequestMapping("/truong_nguyen/api/v1/products")
public class ProductController extends BaseController {
	@Autowired
	private ProductRepository productRepository;

	@GetMapping("/list")
	public ResponseEntity getList(@RequestParam(value = "trans_id") String trans_id,
			@RequestParam(value = "page_index", required = false, defaultValue = "0") int page_index,
			@RequestParam(value = "page_size", required = false, defaultValue = "5") int page_size,
			@RequestParam(value = "order_by", required = false, defaultValue = "id") String order_by,
			@RequestParam(value = "order_type", required = false, defaultValue = "ASC") String order_type) {
		logPaging(trans_id, page_index, page_size, order_by, order_type);
		PageInfo pageInfo = null;
		BasePagingDataResponse response = null;

		try {
			pageInfo = new PageInfo();
			pageInfo.setPage_index(page_index);
			pageInfo.setPage_size(page_size);
			pageInfo.setOrder_by(order_by);
			pageInfo.setOrder_type(order_type.equals("ASC"));
			response = productRepository.getAll(pageInfo);
		} catch (Exception ex) {
			logger.debug(ex);
			return getResponse(HttpStatus.BAD_REQUEST, StatusCode.ERROR_CODE, StatusMessage.ERROR_MESSAGE, null);
		}

		logResult(trans_id, response);
		return getResponse(HttpStatus.OK, StatusCode.SUCCESS_CODE, StatusMessage.SUCCESS_MESSAGE, response);
	}

	@GetMapping("/list_by_category")
	public ResponseEntity getListByName(@RequestParam(value = "trans_id") String trans_id,
			@RequestParam(value = "page_index", required = false, defaultValue = "0") int page_index,
			@RequestParam(value = "page_size", required = false, defaultValue = "5") int page_size,
			@RequestParam(value = "order_by", required = false, defaultValue = "id") String order_by,
			@RequestParam(value = "order_type", required = false, defaultValue = "ASC") String order_type,
			@RequestParam("category_id") int category_id) {
		logPagingByAttribute(trans_id, page_index, page_size, order_by, order_type, category_id);
		BasePagingDataResponse response = null;
		PageInfo pageInfo = null;
		try {
			pageInfo = new PageInfo();
			pageInfo.setPage_index(page_index);
			pageInfo.setPage_size(page_size);
			pageInfo.setOrder_by(order_by);
			pageInfo.setOrder_type(order_type.equals("ASC"));
			response = productRepository.getAllByCategory(category_id, pageInfo);
		} catch (Exception ex) {
			logger.debug(ex);
			return getResponse(HttpStatus.BAD_REQUEST, StatusCode.ERROR_CODE, StatusMessage.ERROR_MESSAGE, null);
		}

		logResult(trans_id, pageInfo);
		return getResponse(HttpStatus.OK, StatusCode.SUCCESS_CODE, StatusMessage.SUCCESS_MESSAGE, response);
	}

}
